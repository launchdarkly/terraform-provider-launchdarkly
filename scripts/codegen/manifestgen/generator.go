package manifestgen

import (
	"io"

	"github.com/dave/jennifer/jen"
)

// These integrations are ommitted because the subscriptions are created and managed by the integrations
var OMITTED_INTEGRATION_KEYS = []string{
	"msteams-app",
	"compass",
	"zapier",
}

func isOmitted(integrationKey string) bool {
	for _, invalidIntegrationKey := range OMITTED_INTEGRATION_KEYS {
		if integrationKey == invalidIntegrationKey {
			return true
		}
	}
	return false
}

func renderSubscriptionConfigurationFields(manifests []Manifest) jen.Code {
	integrationsDict := make(jen.Dict, len(manifests))
	for _, manifest := range manifests {
		if manifest.RequiresOauth {
			continue
		}
		if _, ok := manifest.Capabilities["auditLogEventsHook"]; !ok {
			continue
		}

		if isOmitted(manifest.Key) {
			continue
		}

		configDict := make(jen.Dict, len(manifest.FormVariables))
		for _, formVar := range manifest.FormVariables {
			configDict[jen.Lit(formVar.Key)] = jen.Values(convertFormVarToDict(formVar))
		}
		integrationsDict[jen.Lit(manifest.Key)] = jen.Values(configDict)
	}

	return jen.Var().Id("SUBSCRIPTION_CONFIGURATION_FIELDS").Op("=").Map(jen.String()).Id("IntegrationConfig").Values(
		integrationsDict,
	)
}

func renderValidTriggerIntegrations(manifests []Manifest) jen.Code {
	// Get list of valid trigger integrations. Always keep `generic-trigger` at the front of the list.
	validTriggers := []string{"generic-trigger"}
	for _, manifest := range manifests {
		if _, ok := manifest.Capabilities["trigger"]; !ok {
			continue
		}

		if manifest.Key == "generic-trigger" {
			continue
		}

		validTriggers = append(validTriggers, manifest.Key)
	}

	return jen.Var().Id("VALID_TRIGGER_INTEGRATIONS").Op("=").Index().String().ValuesFunc(func(g *jen.Group) {
		for _, trigger := range validTriggers {
			g.Lit(trigger)
		}
	})
}

func Render(w io.Writer, manifests []Manifest) error {
	file := jen.NewFile("launchdarkly")
	file.HeaderComment("Code generated by github.com/launchdarkly/terraform-provider-launchdarkly/scripts/codegen DO NOT EDIT.")

	file.Add(jen.Comment("SUBSCRIPTION_CONFIGURATION_FIELDS is a map of integration keys to their configuration fields. This map is generated from the LaunchDarkly integration manifest API."))
	file.Add(renderSubscriptionConfigurationFields(manifests))
	file.Line()

	file.Add(jen.Comment("VALID_TRIGGER_INTEGRATIONS is a list of valid trigger integrations. This list is generated from the LaunchDarkly integration manifest API."))
	file.Add(renderValidTriggerIntegrations(manifests))

	return file.Render(w)
}

func convertFormVarToDict(formVar FormVariable) jen.Dict {
	return jen.Dict{
		jen.Id("AllowedValues"): convertAllowedValues(formVar.AllowedValues),
		jen.Id("DefaultValue"):  convertDefaultValue(formVar.DefaultValue),
		jen.Id("Description"):   jen.Lit(formVar.Description),
		jen.Id("IsSecret"):      jen.Lit(formVar.IsSecret),
		jen.Id("IsOptional"):    jen.Lit(formVar.IsOptional),
		jen.Id("Type"):          jen.Lit(formVar.Type),
	}
}

func convertAllowedValues(allowedValues []string) jen.Code {
	return jen.Index().String().ValuesFunc(func(g *jen.Group) {
		for _, v := range allowedValues {
			g.Lit(v)
		}
	})
}

func convertDefaultValue(defaultValue interface{}) jen.Code {
	switch v := defaultValue.(type) {
	case string:
		return jen.Lit(v)
	case bool:
		return jen.Lit(v)
	default:
		return jen.Nil()
	}
}
